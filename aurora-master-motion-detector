#!/usr/bin/env python3

import RPi.GPIO as GPIO
import logging
import requests
import sys
import time

from datetime import datetime, timedelta
from signal import signal, SIGABRT, SIGILL, SIGINT, SIGSEGV, SIGTERM

logger = logging.getLogger()
logger.setLevel(logging.INFO)

handler = logging.StreamHandler(sys.stdout)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)

# The pir connect to pin17
PIR_PIN = 17
# How often we check the PIR sensor.
SLEEP_INTERVAL = timedelta(seconds=0.5)

DELAY = timedelta(minutes=5)
AURORA_MASTER_HOSTNAME = "esp8266.local"


def activate_aurora_master():
    max_attempts = 20

    for attempt in range(max_attempts):
        current_state = requests.get(f"http://{AURORA_MASTER_HOSTNAME}/state").text
        if current_state == '1':
            logger.info("Aurora Master activated")
            break
        # Change the mode twice to get the nicest mode (multiple colors)
        text = requests.get(f"http://{AURORA_MASTER_HOSTNAME}/change_mode").text
        logger.info(f"Changed mode attempted. Result: {text}")
        text = requests.get(f"http://{AURORA_MASTER_HOSTNAME}/change_mode").text
        logger.info(f"Changed mode attempted. Result: {text}")
        time.sleep(0.1)
    else:
        logger.error("Number of attempts exceeded! It was not possible to activate Aurora Master.")


def main_loop():
    logging.info("Starting Motion Detection...")
    active = False
    last_known_motion = datetime.now()
    while True:
        pir_val = GPIO.input(PIR_PIN)
        if pir_val==GPIO.HIGH and not active:
            logging.info("Detected movement. Activating Aurora Master...")
            activate_aurora_master()
            active = True
            last_known_motion = datetime.now()

        if active:
            if datetime.now() - last_known_motion > DELAY:
                logging.info(f"No movement in the last {DELAY}.")
                active = False
                # Here we can optionally add an action of deactivating the Aurora Master
        time.sleep(SLEEP_INTERVAL.total_seconds())

def setup():
    # Set the GPIO modes to BCM Numbering
    GPIO.setmode(GPIO.BCM)
    # Set PIR_PIN to input
    GPIO.setup(PIR_PIN, GPIO.IN)

def destroy():
    logging.info("Exiting: releasing GPIO resources.")
    GPIO.cleanup()

if __name__ == '__main__':
    def exit_handler(*args):
        destroy()
        sys.exit(0)

    for sig in (SIGABRT, SIGILL, SIGINT, SIGSEGV, SIGTERM):
        signal(sig, exit_handler)

    setup()
    main_loop()
